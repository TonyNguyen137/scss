@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';

@function px-to-rem($pixels) {
  $base-font-size: 16;
  @return math.div($pixels, 16) * 1rem;
}

@function px-to-em($pixels) {
  $base-font-size: 16;
  @return math.div($pixels, 16) * 1em;
}

// Removes 'em, rem', multiply with 16 and returns the unitless value
@function remove-unit-and-convert($value) {
  $unit: math.unit($value);

  @if $unit == rem {
    $unitless-number: calc($value / 1rem);
    @return multiplyBy(16, $unitless-number);
  }

  @if $unit == em {
    $unitless-number: calc($value / 1em);

    @return multiplyBy(16, $unitless-number);
  }

  @if $unit == px {
    $unitless-number: calc($value / 1px);

    @return $unitless-number;
  }

  @return null;
}

@function multiplyBy($factor: 16, $value) {
  @return $factor * $value;
}
// @function clr($color, $shade) {
//   @if map.has-key($colors, $color, $shade) {
//     @return map.get($colors, $color, $shade);
//   } @else {
//     @error '$colors does not have that color!';
//   }
// }
// @function fs($font-size) {
//   @if map.has-key($font-sizes, $font-size) {
//     @return map.get($font-sizes, $font-size);
//   } @else {
//     @error '$font-sizes does not have that size!';
//   }
// }

// @function size($size) {
//   @if map.has-key($spacers, $size) {
//     @return map.get($spacers, $size);
//   } @else {
//     @error '$spacers does not have that size!';
//   }
// }
