@use 'sass:meta';
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:selector';
@use 'functions' as *;
@use 'breakpoints' as *;
@use 'variables' as *;
@use 'colors' as *;

@mixin add-root-css-variables($variables) {
  // Loop through the map of variables
  @each $name, $value in $variables {
    // Use @at-root to ensure this is at the top level of CSS
    @at-root {
      :root {
        --#{$name}: #{$value};
      }
    }
  }
}

// media query
@mixin mq($size) {
  @if map.has-key($grid-breakpoints, $size) {
    $breakpoint: map.get($grid-breakpoints, $size);
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if meta.type-of($size) == number {
    @if math.is-unitless($size) {
      @error 'when using a number with @mq() make sure to include a unit';
    } @else {
      @media screen and (min-width: $size) {
        @content;
      }
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

@mixin make-container($gutter: $container-padding-x) {
  width: 100%;
  padding-inline: $gutter;
  margin-inline: auto;
}

@mixin make-container-fluid($max-width, $gutter: $container-padding-x) {
  max-width: $max-width;
  padding-inline: $gutter;
  margin-inline: auto;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media screen and (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Bootstrap grid system
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: math.percentage(math.div(1, $count));
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  --#{$bs-prefix}gutter-x: #{$gutter};
  --#{$bs-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--#{$bs-prefix}gutter-y));
  margin-right: calc(-0.5 * var(--#{$bs-prefix}gutter-x));
  margin-left: calc(-0.5 * var(--#{$bs-prefix}gutter-x));
}

@mixin make-col-ready() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(
    variable-exists(include-column-box-sizing) and $include-column-box-sizing,
    border-box,
    null
  );
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(
    var(--#{$bs-prefix}gutter-x) * 0.5
  ); // stylelint-disable-line function-disallowed-list
  padding-left: calc(
    var(--#{$bs-prefix}gutter-x) * 0.5
  ); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$bs-prefix}gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: math.percentage(math.div($size, $columns));
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, math.percentage($num));
}

@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint in map.keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key, $value in $gutters {
        .g#{$infix}-#{$key},
        .gx#{$infix}-#{$key} {
          --#{$bs-prefix}gutter-x: #{$value};
        }

        .g#{$infix}-#{$key},
        .gy#{$infix}-#{$key} {
          --#{$bs-prefix}gutter-y: #{$value};
        }
      }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns > 0 {
        @for $i from 1 through $columns {
          .g-col#{$infix}-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Start with `1` because `0` is an invalid value.
        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
        @for $i from 1 through ($columns - 1) {
          .g-start#{$infix}-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}

// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility(
  $utility,
  $infix: '',
  $key,
  $is-rfs-media-query: false
) {
  $values: map.get($utility, values);
  // @debug key $key 'valuesss' $values;

  // Check if the list is not empty before accessing the first element
  @if list.length($values) > 0 {
    // If the values are a list or string, convert it into a map
    @if meta.type-of($values) ==
      'string' or
      meta.type-of(list.nth($values, 1)) !=
      'list'
    {
      $values: list.zip($values, $values);
    }
  }

  @each $key, $value in $values {
    $properties: map.get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == 'string' {
      $properties: list.append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map.has-key($utility, class),
      map.get($utility, class),
      list.nth($properties, 1)
    );
    $property-class: if($property-class == null, '', $property-class);

    // Use custom CSS variable name if present, otherwise default to `class`
    $css-variable-name: if(
      map.has-key($utility, css-variable-name),
      map.get($utility, css-variable-name),
      map.get($utility, class)
    );

    // State params to generate pseudo-classes
    $state: if(map.has-key($utility, state), map.get($utility, state), ());

    $infix: if(
      $property-class == '' and string.slice($infix, 1, 1) == '-',
      string.slice($infix, 2),
      $infix
    );

    // Don't prefix if value key is null (e.g. with shadow class)
    $property-class-modifier: if(
      $key,
      if($property-class == '' and $infix == '', '', '-') + $key,
      ''
    );

    // @if map-get($utility, rfs) {
    //   // Inside the media query
    //   @if $is-rfs-media-query {
    //     $val: rfs-value($value);

    //     // Do not render anything if fluid and non fluid values are the same
    //     $value: if($val == rfs-fluid-value($value), null, $val);
    //   } @else {
    //     $value: rfs-fluid-value($value);
    //   }
    // }

    $is-css-var: map.get($utility, css-var);
    $is-local-vars: map.get($utility, local-vars);
    $is-rtl: map.get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        .#{$property-class + $infix + $property-class-modifier} {
          --#{$prefix}#{$css-variable-name}: #{$value};
        }

        @each $pseudo in $state {
          .#{$property-class
            + $infix
            + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            --#{$prefix}#{$css-variable-name}: #{$value};
          }
        }
      } @else {
        $is-important: if(map.get($utility, important), true, false);

        .#{$property-class + $infix + $property-class-modifier} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $variable in $is-local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }
            #{$property}: $value if($is-important, !important, null);
          }
        }

        @each $pseudo in $state {
          .#{$property-class
            + $infix
            + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$variable};
                }
              }
              #{$property}: $value if($is-important, !important, null);
            }
          }
        }
      }

      // @if $is-rtl == false {
      //   /* rtl:end:remove */
      // }
    }
  }
}

// @mixin generate-utility($utility, $key) {
//   $class: if(
//     map.get($utility, 'class') == null,
//     $key,
//     map.get($utility, 'class')
//   );
//   $property: map.get($utility, 'property');
//   $values: map.get($utility, 'values');
//   $values-type: meta.type-of($values);
//   $is-responsive: map.get($utility, 'responsive');
//   $is-important: map.get($utility, 'important');

//   $css-var: map.get($utility, 'css-var');
//   $local-vars: map.get($utility, 'local-vars');

//   @if $is-responsive {
//     @each $breakpoint in map.keys($grid-breakpoints) {
//       $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

//       @include media-breakpoint-up($breakpoint) {
//         @if ($values-type == 'map') {
//           @each $suffix, $value in $values {
//             @if meta.type-of($value) == 'map' {
//               @if $is-important {
//                 @each $k, $v in $value {
//                   .#{$class}#{$infix}-#{$suffix}-#{$k} {
//                     #{$property}: $v !important;
//                   }
//                 }
//               } @else {
//                 @each $k, $v in $value {
//                   .#{$class}#{$infix}-#{$suffix}-#{$k} {
//                     #{$property}: $v;
//                   }
//                 }
//               }
//             } @else {
//               @if $is-important {
//                 .#{$class}#{$infix}-#{$suffix} {
//                   #{$property}: $value !important;
//                 }
//               } @else {
//                 .#{$class}#{$infix}-#{$suffix} {
//                   #{$property}: $value;
//                 }
//               }
//             }
//           }
//         } @else if($values-type == 'list') {
//           @each $value in $values {
//             @if $is-important {
//               .#{$class}#{$infix}-#{$value} {
//                 #{$property}: $value !important;
//               }
//             } @else {
//               .#{$class}#{$infix}-#{$value} {
//                 #{$property}: $value;
//               }
//             }
//           }
//         } @else if(
//           $values-type ==
//             'number' or
//             $values-type ==
//             'color'
//             $values-type ==
//             'string'
//         )
//         {
//           @each $value in $values {
//             @if $is-important {
//               .#{$class}#{$infix} {
//                 #{$property}: $value !important;
//               }
//             } @else {
//               .#{$class}#{$infix} {
//                 #{$property}: $value;
//               }
//             }
//           }
//         } @else {
//           @error "Something went wrong. Check your inputs in utilites map!";
//         }
//       }
//     }
//   } @else {
//     @if $values-type ==
//       'number' or
//       $values-type ==
//       'string' or
//       $values-type ==
//       'color'
//     {
//       @each $value in $values {
//         @if $is-important {
//           .#{$class} {
//             #{$property}: $value !important;
//           }
//         } @else {
//           .#{$class} {
//             #{$property}: $value;
//           }
//         }
//       }
//     } @else if $values-type == 'map' {
//       @each $suffix, $value in $values {
//         @if meta.type-of($value) == 'map' {
//           @if $is-important {
//             @each $k, $v in $value {
//               .#{$class}-#{$suffix}-#{$k} {
//                 #{$property}: $v !important;
//               }
//             }
//           } @else {
//             @each $k, $v in $value {
//               .#{$class}-#{$suffix}-#{$k} {
//                 #{$property}: $v;
//               }
//             }
//           }
//         } @else {
//           @if $is-important {
//             .#{$class}-#{$suffix} {
//               #{$property}: $value !important;
//             }
//           } @else {
//             .#{$class}-#{$suffix} {
//               #{$property}: $value;
//             }
//           }
//         }
//       }
//     } @else if $values-type == 'list' {
//       @each $value in $values {
//         @if $imporant {
//           .#{$class}-#{$value} {
//             #{$property}: $value !important;
//           }
//         } @else {
//           .#{$class}-#{$value} {
//             #{$property}: $value;
//           }
//         }
//       }
//     } @else {
//       @error "Something went wrong. Check your inputs in utilites map!";
//     }
//   }
// }

@mixin generate-colors($utility, $key) {
  // @debug utility $utility key $key;
  $class: if(
    map.get($utility, 'class') == null,
    $key,
    map.get($utility, 'class')
  );
  $property: map.get($utility, 'property');
  $values: map.get($utility, 'values');
  $values-type: meta.type-of($values);
  $is-responsive: map.get($utility, 'responsive');
  $is-important: map.get($utility, 'important');
  $is-css-var: map.get($utility, 'css-var');
  $is-local-vars: map.get($utility, 'local-vars');

  @if $is-responsive {
    @each $breakpoint in map.keys($grid-breakpoints) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @include media-breakpoint-up($breakpoint) {
        @each $key, $value in $values {
          @if meta.type-of($value) != 'map' {
            .#{$class}#{$infix}-#{$key} {
              #{$property}: rgba(
                var(--#{$prefix}#{$color-variable-prefix}#{$key}),
                var(--bg-opacity, 1)
              );
            }
          } @else {
            @each $k, $v in $value {
              .#{$class}#{$infix}-#{$key}-#{$k} {
                #{$property}: rgba(
                  var(--#{$prefix}#{$color-variable-prefix}#{$key}-#{$k}),
                  var(--bg-opacity, 1)
                );
              }
            }
          }
        }
      }
    }
  } @else {
    @each $key, $value in $values {
      // @debug value $value != 'map';
      @if meta.type-of($value) != 'map' {
        .#{$class}-#{$key} {
          #{$property}: rgba(
            var(--#{$prefix}#{$color-variable-prefix}#{$key}),
            var(--bg-opacity, 1)
          );
        }
      } @else {
        @each $k, $v in $value {
          .#{$class}-#{$key}-#{$k} {
            #{$property}: rgba(
              var(--#{$prefix}#{$color-variable-prefix}#{$key}-#{$k}),
              var(--bg-opacity, 1)
            );
          }
        }
      }
    }
  }
}
