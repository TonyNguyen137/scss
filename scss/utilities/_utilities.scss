@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:meta';

@each $key, $map in $utilities {
  $class: map.get($map, 'class');
  $property: map.get($map, 'property');
  $valueObject: map.get($map, 'values');
  $responsive: map.get($map, 'isResponsive');

  @if $key == 'background-colors' or $key == 'text-colors' {
    @each $color, $shade-map in $valueObject {
      $type: meta.type-of($shade-map);
      $class: if($class == null, $key, $class);

      @if ($type == 'color') {
        .#{$class}-#{$color} {
          #{$property}: var(--#{$prefix}#{$color-variable-prefix}#{$color});
        }

        @if $responsive {
          @each $breakpoint, $size in $grid-breakpoints {
            @include mq(#{$breakpoint}) {
              .#{$class}-#{$breakpoint}-#{$color} {
                #{$property}: var(
                  --#{$prefix}#{$color-variable-prefix}#{$color}
                );
              }
            }
          }
        }
      } @else if ($type == 'map') {
        @each $shade, $value in $shade-map {
          @if (meta.type-of($value) != 'color') {
            @error '#{$value} is not a color!';
          }
          .#{$class}-#{$color}-#{$shade} {
            #{$property}: var(
              --#{$prefix}#{$color-variable-prefix}#{$color}-#{$shade}
            );
          }
          @if $responsive {
            @each $breakpoint, $size in $grid-breakpoints {
              @include mq(#{$breakpoint}) {
                .#{$class}-#{$breakpoint}-#{$color}#{$shade} {
                  #{$property}: var(
                    --#{$prefix}#{$color-variable-prefix}#{$color}-#{$shade}
                  );
                }
              }
            }
          }
        }
      } @else {
        @error 'the input is not correct';
      }
    }
  } @else {
    @if meta.type-of($valueObject) == 'map' {
      @each $suffix, $value in $valueObject {
        $class: if($class == null, $key, $class);
        .#{$class}-#{$suffix} {
          #{$property}: $value;
        }
        @if $responsive {
          @each $breakpoint, $size in $grid-breakpoints {
            @include mq(#{$breakpoint}) {
              .#{$class}-#{$breakpoint}-#{$suffix} {
                #{$property}: $value;
              }
            }
          }
        }
      }
    } @else if meta.type-of($valueObject) == 'list' {
      @each $value in $valueObject {
        .#{$class}-#{$value} {
          #{$property}: $value;
        }

        @if $responsive {
          @each $breakpoint, $size in $grid-breakpoints {
            @include mq(#{$breakpoint}) {
              .#{$class}-#{$breakpoint}-#{$value} {
                #{$property}: $value;
              }
            }
          }
        }
      }
    } @else if
      meta.type-of($valueObject) ==
      'string' or
      meta.type-of($valueObject) ==
      number
    {
      .#{$class}-#{$valueObject} {
        #{$property}: $valueObject;
      }
      @if $responsive {
        @each $breakpoint, $size in $grid-breakpoints {
          @include mq(#{$breakpoint}) {
            .#{$class}-#{$breakpoint}-#{$valueObject} {
              #{$property}: $valueObject;
            }
          }
        }
      }
    } @else {
      @error 'something went wrong. Check your inputs in utilities';
    }
  }
}
