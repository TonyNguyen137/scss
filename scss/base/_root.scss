@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

$color-theme-rgb: map-loop($active-theme, to-rgb, '$value');

:root {
  // css variables for default color theme
  @each $color, $rgb-value in $color-theme-rgb {
    $type: meta.type-of($rgb-value);

    @if ($type == 'list') {
      --#{$prefix}#{$color-prefix}#{$color}: rgb(#{$rgb-value});
    } @else {
      @error 'the color input is not correct';
    }
  }

  /* Generates CSS variables with clamp() values derived from the font-size-clamp and spacer-clamp maps in fonts.scss and spacing.scss */
  $clamp-map: map.merge($font-size-clamp, $spacer-clamp);
  @each $key, $map in $clamp-map {
    $threshold: map.keys($map);
    $sizeMin: map.get($map, list.nth($threshold, 1));
    $sizeMax: map.get($map, list.nth($threshold, 2));

    $viewportMin: remove-unit-and-convert(
      map.get($grid-breakpoints, list.nth($threshold, 1))
    );
    $viewportMax: remove-unit-and-convert(
      map.get($grid-breakpoints, list.nth($threshold, 2))
    );

    $deltaSize: $sizeMax - $sizeMin;
    $deltaViewport: $viewportMax - $viewportMin;
    $change: math.div($deltaSize, $deltaViewport);

    $preferred: px-to-rem($sizeMax - ($viewportMax * $change));

    $rateOfChange: 100vw * $change;

    $sizeMin: px-to-rem($sizeMin);
    $sizeMax: px-to-rem($sizeMax);

    --#{$prefix}#{$clamp-prefix}#{$key}: clamp(
      #{$sizeMin},
      #{$preferred} + #{$rateOfChange},
      #{$sizeMax}
    );
  }

  $spacer-default: map.get($spacers, default);
  $fs-default: map.get($font-sizes, default);

  // css variables for spacers
  @if (list.length($spacer-default) > 0) {
    @each $size-name, $size-value in $spacer-default {
      --#{$prefix}#{$spacer-prefix}#{$size-name}: #{$size-value};
    }
  }

  // css variables for font-size
  @if (list.length($fs-default) > 0) {
    @each $size-name, $size-value in $fs-default {
      --#{$prefix}#{$font-prefix}#{$size-name}: #{$size-value};
    }
  }

  $spacers-no-default: map-remove($spacers, 'default');
  $font-sizes-no-default: map-remove($font-sizes, 'default');

  // css variables for spacers != default
  @if (list.length($spacers-no-default) > 0) {
    @each $screen-size, $size-map in $spacers-no-default {
      @include mq($screen-size) {
        @each $size-name, $size-value in $size-map {
          // @debug $screen-size, $size-name, $size-value;

          --#{$prefix}#{$spacer-prefix}#{$size-name}: #{$size-value};
        }
      }
    }
  }

  // css variables for font-sizes != default
  @if (list.length($font-sizes-no-default) > 0) {
    @each $screen-size, $size-map in $font-sizes-no-default {
      @include mq($screen-size) {
        @each $size-name, $size-value in $size-map {
          --#{$prefix}#{$font-prefix}#{$size-name}: #{$size-value};
        }
      }
    }
  }

  // @if ($enable-media-query-dark-mode) {
  //   @media (prefers-color-scheme: dark) {
  //     @each $color, $shade-map in map.get($color-theme, dark) {
  //       @each $shade, $value in $shade-map {
  //         --#{$prefix}#{$color-prefix}#{$color}-#{$shade}: #{$value};
  //       }
  //     }
  //   }
  // }
}

// css variables for utilities

:root {
  @each $key, $utility in $utilities {
    $global-vars: if(
      map.get($utility, global-vars),
      map.get($utility, global-vars),
      ()
    );
    @each $breakpoint in map.keys($global-vars) {
      @debug $breakpoint;

      @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $variable-name, $value in map.get($global-vars, $breakpoint) {
          @debug name $variable-name, value $value;

          --#{$variable-name}: #{$value};
        }
      }
    }
  }
}

// css variables for other color themes
@each $theme, $colors in $color-theme-flat {
  @if ($theme != 'default') {
    [data-theme='#{$theme}'] {
      $color-rgb: map-loop($colors, to-rgb, '$value');
      @each $color, $rgb-value in $color-rgb {
        $type: meta.type-of($rgb-value);
        @if ($type == 'list') {
          --#{$prefix}#{$color-prefix}#{$color}: rgb(#{$rgb-value});
        } @else {
          @error 'the color input is not correct';
        }
      }
    }
  }
}
