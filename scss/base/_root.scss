@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

$color-theme-rgb: map-loop($active-theme, to-rgb, '$value');
$clamp-map: map.merge($font-size-clamp, $spacer-clamp);
$sizes-default: if(
  map.get($sizes-vars, default) == null,
  (),
  map.get($sizes-vars, default)
);

$sizes-res: map-remove($sizes-vars, 'default');

@debug sizes-default $sizes-default;
@debug sizes-res $sizes-res;

:root {
  // css variables for default color theme
  @include generate-color-vars-rgb($color-theme-rgb, $color-prefix);

  // generates CSS vars from $size-vars default;
  @include generate-vars($sizes-default, $sizes-prefix);

  // generates CSS vars with clamp() values derived from the font-size-clamp and spacer-clamp maps in fonts.scss and spacing.scss
  @include generate-clamp-vars($clamp-map, $clamp-prefix);

  //generate responsive CSS vars
  @include generate-vars-res($sizes-res, $sizes-prefix);

  // @if ($enable-media-query-dark-mode) {
  //   @media (prefers-color-scheme: dark) {
  //     @each $color, $shade-map in map.get($color-theme, dark) {
  //       @each $shade, $value in $shade-map {
  //         --#{$prefix}#{$color-prefix}#{$color}-#{$shade}: #{$value};
  //       }
  //     }
  //   }
  // }
}

// css variables for other color themes
@each $theme, $colors in $color-theme-flat {
  @if ($theme != 'default') {
    [data-theme='#{$theme}'] {
      $color-rgb: map-loop($colors, to-rgb, '$value');
      @each $color, $rgb-value in $color-rgb {
        $type: meta.type-of($rgb-value);
        @if ($type == 'list') {
          --#{$prefix}#{$color-prefix}#{$color}: rgb(#{$rgb-value});
        } @else {
          @error 'the color input is not correct';
        }
      }
    }
  }
}
