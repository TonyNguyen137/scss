/* 
This file contains SCSS mixins sourced from the Bootstrap framework.
Source: https://github.com/twbs/bootstrap/tree/main/scss/mixins
These mixins are used in accordance with Bootstrap's open-source license (MIT).
Modifications may have been made to the original mixins.
*/
@use 'sass:meta';
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use 'sass:selector';
@use 'functions' as *;
@use 'variables' as *;
@use 'placeholder' as *;

@mixin generate-breakpoints($grid-breakpoints) {
  @each $bp in map.keys($grid-breakpoints) {
    $value: map.get($grid-breakpoints, $bp);
    $value: if($value != 0, $value, null);

    @if $value {
      --#{$bp}: #{$value};
    }
  }
}

@mixin transition($transition...) {
  @if list.length($transition) == 0 {
    $transition: $transition-base;
  }

  @if list.length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if $enable-transitions {
    @if list.nth($transition, 1) != null {
      transition: $transition;
    }

    @if $enable-reduced-motion and
      list.nth($transition, 1) !=
      null and
      list.nth($transition, 1) !=
      none
    {
      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }
  }
}

// media query

@mixin mq($size, $add-media-hover: false) {
  // @debug $size;
  // @debug $add-media-hover;

  @if map.has-key($grid-breakpoints, $size) and $size != 'xs' {
    $breakpoint: map.get($grid-breakpoints, $size);

    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else {
    @error 'the keyword #{$size} is not in the $breakpoints map';
  }
}

@mixin make-container($gutter: $container-padding-x) {
  width: 100%;
  padding-inline: $gutter;
  margin-inline: auto;
}

@mixin make-container-fluid($max-width, $gutter: $container-padding-x) {
  max-width: $max-width;
  padding-inline: $gutter;
  margin-inline: auto;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media screen and (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Bootstrap grid system
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: math.percentage(math.div(1, $count));
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  --#{$bs-prefix}gutter-x: #{$gutter};
  --#{$bs-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--#{$bs-prefix}gutter-y));
  margin-right: calc(-0.5 * var(--#{$bs-prefix}gutter-x));
  margin-left: calc(-0.5 * var(--#{$bs-prefix}gutter-x));
}

@mixin make-col-ready() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(
    meta.variable-exists(include-column-box-sizing) and
      $include-column-box-sizing,
    border-box,
    null
  );
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(
    var(--#{$bs-prefix}gutter-x) * 0.5
  ); // stylelint-disable-line function-disallowed-list
  padding-left: calc(
    var(--#{$bs-prefix}gutter-x) * 0.5
  ); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$bs-prefix}gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: math.percentage(math.div($size, $columns));
  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, math.percentage($num));
}

@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint in map.keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @if ($enable-gutters) {
        @each $key, $value in $sizes-regular {
          .g#{$infix}-#{$key},
          .gx#{$infix}-#{$key} {
            --#{$bs-prefix}gutter-x: #{$value};
          }

          .g#{$infix}-#{$key},
          .gy#{$infix}-#{$key} {
            --#{$bs-prefix}gutter-y: #{$value};
          }
        }
      }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns > 0 {
        @for $i from 1 through $columns {
          .g-col#{$infix}-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Start with `1` because `0` is an invalid value.
        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
        @for $i from 1 through ($columns - 1) {
          .g-start#{$infix}-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}
@mixin generate-complex-utility(
  $utility,
  $infix: '',
  $key,
  $is-rfs-media-query: false
) {
  $values: map.get($utility, values);

  // Check if the list is not empty before accessing the first element
  @if list.length($values) > 0 {
    // If the values are a list or string, convert it into a map
    @if meta.type-of($values) ==
      'string' or
      meta.type-of(list.nth($values, 1)) !=
      'list'
    {
      $values: list.zip($values, $values);
    }
  }

  $is-important: if(map.get($utility, important), true, false);
  $properties: map.get($utility, property);

  $custom-property-value: if(
    map.has-key($utility, custom-property-value),
    map.get($utility, custom-property-value),
    null
  );
  $state: if(map.has-key($utility, state), map.get($utility, state), null);

  // Multiple properties are possible, for example with vertical or horizontal margins or paddings
  @if meta.type-of($properties) == 'string' {
    $properties: list.append((), $properties);
  }

  $css-var: map.get($utility, css-var);
  $is-local-vars: map.get($utility, local-vars);
  $is-rtl: map.get($utility, rtl);

  @if ($key == 'clamp-size') {
    $keys: map.keys($values);
    $prefix: map.get($utility, prefix);

    @each $className in $keys {
      .#{$prefix}#{$className} {
        font-size: var(--#{$prefix}#{$className});
      }
    }
  }

  @if ($key == 'clamp-space') {
    $keys: map.keys($values);
    $prefix: map.get($utility, prefix);
    @debug $keys;
    @debug $prefix;

    @each $className in $keys {
      .py-#{$prefix}#{$className} {
        padding-block: var(--#{$prefix}#{$className});
      }

      .mb-#{$prefix}#{$className} {
        margin-bottom: var(--#{$prefix}#{$className});
      }
    }
  }

  // class with @extends
  @if (map.has-key($utility, placeholder)) {
    $placeholder: map.get($utility, placeholder);
    $class-name: map.get($utility, class);

    // @debug placeholder $placeholder;
    // @debug class-name $class-name;

    .#{$class-name} {
      @extend #{$placeholder};
    }
  }

  // maps $custom-property as value to a property
  @if $custom-property-value {
    $property-class: if(
      map.has-key($utility, class),
      map.get($utility, class),
      ''
    );

    $infix: if(
      $property-class == '' and string.slice($infix, 1, 1) == '-',
      string.slice($infix, 2),
      $infix
    );

    @each $property in $properties {
      .#{$property-class + $infix} {
        #{$property}: var(--#{$custom-property-value})
          if($is-important, !important, null);
      }
    }
  }

  @if meta.type-of($properties) == 'map' {
    $property-class: if(
      map.has-key($utility, class),
      map.get($utility, class),
      ''
    );
    $prefix-class: null;
    $suffix-class: null;
    $dash-index: string.index($property-class, '-');
    $state: if(map.has-key($utility, state), map.get($utility, state), '');

    @if $dash-index {
      $prefix-class: string.slice($property-class, 1, $dash-index - 1);
      $suffix-class: string.slice($property-class, $dash-index + 1);
    }

    // $prefix-class: string.slice('Helvetica Neue', 11); // "Neue"
    // @debug class $property-class;

    $infix: if(
      $property-class == '' and string.slice($infix, 1, 1) == '-',
      string.slice($infix, 2),
      $infix
    );

    .#{if($prefix-class, $prefix-class,$property-class)
      + $infix
      + if($suffix-class, -$suffix-class,'')
      + $state} {
      @each $property, $value in $properties {
        #{$property}: $value if($is-important, !important, null);
      }
    }
  }

  @if $state {
    @each $key, $value in $values {
      // Use custom class if present
      $property-class: if(
        map.has-key($utility, class),
        map.get($utility, class),
        list.nth($properties, 1)
      );

      // @debug property-class $property-class;
      $property-class: if($property-class == null, '', $property-class);

      $infix: if(
        $property-class == '' and string.slice($infix, 1, 1) == '-',
        string.slice($infix, 2),
        $infix
      );

      // Don't prefix if value key is null (e.g. with shadow class)
      $property-class-modifier: if(
        $key,
        if($property-class == '' and $infix == '', '', '-') + $key,
        ''
      );

      // @debug infix $infix;
      @if $state == ':hover' {
        @media (hover: hover) and (pointer: fine) {
          .#{$property-class + $infix + $property-class-modifier}#{$state} {
            @each $property in $properties {
              #{$property}: $value if($is-important, !important, null);
            }
          }
        }
      } @else {
        .#{$property-class + $infix + $property-class-modifier}#{$state} {
          @each $property in $properties {
            #{$property}: $value if($is-important, !important, null);
          }
        }
      }
    }
  }

  // map values to $custom-property
  @if $properties == null and $css-var {
    @each $key, $value in $values {
      // Use custom class if present
      $property-class: if(
        map.has-key($utility, class),
        map.get($utility, class),
        list.nth($properties, 1)
      );

      // @debug property-class $property-class;
      $property-class: if($property-class == null, '', $property-class);

      $infix: if(
        $property-class == '' and string.slice($infix, 1, 1) == '-',
        string.slice($infix, 2),
        $infix
      );

      // Don't prefix if value key is null (e.g. with shadow class)
      $property-class-modifier: if(
        $key,
        if($property-class == '' and $infix == '', '', '-') + $key,
        ''
      );

      .#{$property-class + $infix + $property-class-modifier} {
        --#{$css-var}: #{$value};
      }
    }
  }

  @if meta.type-of($properties) ==
    'list' and
    $custom-property-value ==
    null and
    $state ==
    null
  {
    @each $key, $value in $values {
      // @debug key $key value $value;

      // Use custom class if present
      $property-class: if(
        map.has-key($utility, class),
        map.get($utility, class),
        list.nth($properties, 1)
      );

      // @debug property-class $property-class;
      $property-class: if($property-class == null, '', $property-class);

      $infix: if(
        $property-class == '' and string.slice($infix, 1, 1) == '-',
        string.slice($infix, 2),
        $infix
      );

      // Don't prefix if value key is null (e.g. with shadow class)
      $property-class-modifier: if(
        $key,
        if($property-class == '' and $infix == '', '', '-') + $key,
        ''
      );

      .#{$property-class + $infix + $property-class-modifier} {
        @each $property in $properties {
          @if $is-local-vars {
            @each $local-var, $variable in $is-local-vars {
              --#{$prefix}#{$local-var}: #{$variable};
            }
          }
          #{$property}: $value if($is-important, !important, null);
        }
      }
    }
  }
}

// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix: '', $is-rfs-media-query: false) {
  $values: map.get($utility, values);

  // If the values are a list or string, convert it into a map
  @if meta.type-of($values) ==
    'string' or
    meta.type-of(list.nth($values, 1)) !=
    'list'
  {
    $values: list.zip($values, $values);
  }
  $is-important: if(
    map.has-key($utility, important),
    map.get($utility, important),
    false
  );
  @each $key, $value in $values {
    $properties: map.get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if meta.type-of($properties) == 'string' {
      $properties: list.append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map.has-key($utility, class),
      map.get($utility, class),
      list.nth($properties, 1)
    );
    $property-class: if($property-class == null, '', $property-class);

    // Use custom CSS variable name if present, otherwise default to `class`
    $css-variable-name: if(
      map.has-key($utility, css-variable-name),
      map.get($utility, css-variable-name),
      map.get($utility, class)
    );

    // State params to generate pseudo-classes
    $state: if(map.has-key($utility, state), map.get($utility, state), ());

    $infix: if(
      $property-class == '' and string.slice($infix, 1, 1) == '-',
      string.slice($infix, 2),
      $infix
    );

    // Don't prefix if value key is null (e.g. with shadow class)
    $property-class-modifier: if(
      $key,
      if($property-class == '' and $infix == '', '', '-') + $key,
      ''
    );

    @if map.get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val == rfs-fluid-value($value), null, $val);
      } @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map.get($utility, css-var);
    $is-local-vars: map.get($utility, local-vars);
    $is-rtl: map.get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      @if $is-css-var {
        .#{$property-class + $infix + $property-class-modifier} {
          --#{$prefix}#{$css-variable-name}: #{$value};
        }

        @each $pseudo in $state {
          .#{$property-class
            + $infix
            + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            --#{$prefix}#{$css-variable-name}: #{$value};
          }
        }
      } @else {
        .#{$property-class + $infix + $property-class-modifier} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $variable in $is-local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }
            #{$property}: $value if($is-important, !important, null);
          }
        }

        @each $pseudo in $state {
          .#{$property-class
            + $infix
            + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
            @each $property in $properties {
              @if $is-local-vars {
                @each $local-var, $variable in $is-local-vars {
                  --#{$prefix}#{$local-var}: #{$variable};
                }
              }
              #{$property}: $value if($is-important, !important, null);
            }
          }
        }
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }
  }
}

@mixin generate-custom-properties($map, $property-prefix: '') {
  @each $breakpoint in map.keys($map) {
    @include media-breakpoint-up($breakpoint) {
      @each $variable-name, $value in map.get($map, $breakpoint) {
        // @debug name $variable-name, value $value;

        --#{$prefix}#{$property-prefix}#{$variable-name}: #{$value};
      }
    }
  }
}

@mixin generate-clamp-custom-properties(
  $clamp-map,
  $clamp-prefix: '',
  $relative-to: 'viewport',
  $threshold-unit: 'px',
  $unit: 'px'
) {
  // @debug unit $unit;

  @each $key, $map in $clamp-map {
    // @debug $key, $map;

    $threshold: map.keys($map);
    $sizeMin: map.get($map, list.nth($threshold, 1));
    $sizeMax: map.get($map, list.nth($threshold, 2));

    // @debug threshhold $threshold;
    // @debug sizeMin $sizeMin;
    // @debug sizeMax $sizeMax;

    // $viewportMin: remove-unit-and-convert(
    //   map.get($grid-breakpoints, list.nth($threshold, 1))
    // );
    // $viewportMax: remove-unit-and-convert(
    //   map.get($grid-breakpoints, list.nth($threshold, 2))
    // );

    $viewportMin: remove-unit-and-convert(list.nth($threshold, 1));
    $viewportMax: remove-unit-and-convert(list.nth($threshold, 2));

    $deltaSize: $sizeMax - $sizeMin;
    $deltaViewport: $viewportMax - $viewportMin;
    $change: round-to(math.div($deltaSize, $deltaViewport), 6);

    // @debug change $change;
    // @debug $change * 100vw;

    // $preferred: round-to($sizeMax - ($viewportMax * $change), 4) * 1px;
    $preferred: if(
      $unit == 'rem',
      round-to(math.div($sizeMax - ($viewportMax * $change), 16) * 1rem, 4),
      round-to($sizeMax - ($viewportMax * $change), 4) * 1px
    );

    $rateOfChange: null;

    @if $relative-to == 'viewport' {
      $rateOfChange: round-to(100vw * $change);
    } @else if $relative-to == 'container' {
      $rateOfChange: round-to(100cqi * $change);
    } @else {
      @error 'Invalid value for $relativeTo. Expected "viewport" or "container".';
    }

    $sizeMin: if($threshold-unit == 'rem', px-to-rem($sizeMin), $sizeMin * 1px);
    $sizeMax: if($threshold-unit == 'rem', px-to-rem($sizeMax), $sizeMax * 1px);

    --#{$prefix}#{$clamp-prefix}#{$key}: clamp(
      #{$sizeMin},
      calc(#{$preferred} + #{$rateOfChange}),
      #{$sizeMax}
    );
  }
}

@mixin generate-color-themes($color-theme, $removed-theme: 'default') {
  // @debug color-theme $color-theme;
  // @debug meta.type-of($color-theme);

  $_theme-map: map.remove($color-theme, $removed-theme);
  // @debug _theme-map $_theme-map;
  // @debug meta meta.type-of($_theme-map);

  @each $theme, $color-map, $color-hover in $_theme-map {
    $colors: map.get($color-map, color);
    $colors-hover: if(
      map.get($color-map, hover) != null,
      map.get($color-map, hover),
      ()
    );
    // @debug theme $theme;
    // @debug color $colors;
    // @debug color-hover $colors-hover;

    [data-theme='#{$theme}'] {
      $colors-rgb: map-loop($colors, to-rgb, '$value');
      @include generate-color-custom-properties($colors, $color-prefix);
      @include generate-color-custom-properties-rgb($colors-rgb, $color-prefix);
      @include generate-color-custom-properties($colors-hover, $hover-prefix);
    }
  }
}

@mixin generate-color-custom-properties($color-theme, $color-prefix: 'clr-') {
  // @debug meta.type-of($color-theme);

  @each $color-name, $value in $color-theme {
    @if (meta.type-of($value) == 'color') {
      --#{$prefix}#{$color-prefix}#{$color-name}: #{$value};
    } @else {
      @error 'the color input is not correct';
    }
  }
}

@mixin generate-color-custom-properties-rgb(
  $color-theme,
  $color-prefix: 'clr-'
) {
  @each $color, $rgb-value in $color-theme {
    $type: meta.type-of($rgb-value);

    @if ($type == 'list') {
      --#{$prefix}#{$color-prefix}#{$color}-rgb: #{$rgb-value};
    } @else {
      @error 'the color input is not correct';
    }
  }
}
