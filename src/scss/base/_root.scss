@use 'node_modules/utopia-core-scss/src/utopia' as utopia;
@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

:root {
  @include generate-breakpoints($grid-breakpoints);

  // custom properties for default color theme
  @include generate-color-custom-properties(
    if(
      $selected-theme-hex-colors == null or $selected-theme-hex-colors == (),
      (),
      $selected-theme-hex-colors
    ),
    $color-prefix
  );

  @include generate-color-custom-properties-rgb(
    if(
      $selected-theme-rgb-colors == null or $selected-theme-rgb-colors == (),
      (),
      $selected-theme-rgb-colors
    ),
    $color-prefix
  );

  // custom properties for default hover color
  @include generate-color-custom-properties(
    map.get($color-theme, $selected-theme, hover),
    $hover-prefix
  );

  // generates custom properties with clamp() values
  @include generate-clamp-custom-properties(
    $size-clamp,
    $size-prefix,
    $size-relative-to,
    $size-threshold-unit,
    $size-preferred-unit
  );

  // generates custom properties with clamp() values
  @include generate-clamp-custom-properties(
    $spacing-clamp,
    $spacing-prefix,
    $spacing-relative-to,
    $spacing-threshold-unit,
    $spacing-preferred-unit
  );

  //generate (responsive) custom properties
  @include generate-custom-properties($custom-properties);

  // @if ($enable-media-query-dark-mode) {
  //   @media (prefers-color-scheme: dark) {
  //     @each $color, $shade-map in map.get($color-theme, dark) {
  //       @each $shade, $value in $shade-map {
  //         --#{$prefix}#{$color-prefix}#{$color}-#{$shade}: #{$value};
  //       }
  //     }
  //   }
  // }

  // @include utopia.generateClamps(
  //   (
  //     'minWidth': 576,
  //     'maxWidth': 1400,
  //     'pairs': (
  //       (32, 150),
  //     ),
  //     'usePx': false,
  //     'relativeTo': 'viewport',
  //     'prefix': 'space-',
  //   )
  // );
}

@if $enable-color-themes {
  @include generate-color-themes($color-theme);
}
