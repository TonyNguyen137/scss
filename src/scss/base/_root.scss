@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

$color-theme-rgb: map-loop($active-theme, to-rgb, '$value');

:root {
  // css variables for default color theme
  @include generate-color-vars($active-theme, $color-prefix);
  @include generate-color-vars-rgb($color-theme-rgb, $color-prefix);

  // generates CSS vars with clamp() values derived from the font-size-clamp and spacer-clamp maps in fonts.scss and spacing.scss
  @include generate-clamp-vars($size-clamp, $clamp-prefix);

  //generate custom properties
  @include generate-vars($custom-properties);

  // @if ($enable-media-query-dark-mode) {
  //   @media (prefers-color-scheme: dark) {
  //     @each $color, $shade-map in map.get($color-theme, dark) {
  //       @each $shade, $value in $shade-map {
  //         --#{$prefix}#{$color-prefix}#{$color}-#{$shade}: #{$value};
  //       }
  //     }
  //   }
  // }
}

/* 

custom properties for other color themes
the mixin will create [data-theme=${theme}] class like this:

[data-theme='grimson'] {
  --clr-primary: #198754;
  --clr-secondary: #0d6efd;
  --clr-success: #6c757d;
  --clr-primary-rgb: 25, 135, 84;
  --clr-secondary-rgb: 13, 110, 253;
  --clr-success-rgb: 108, 117, 125;
}
*/

@if $enable-color-themes {
  @include generate-color-themes($color-theme-map, 'default');
}
